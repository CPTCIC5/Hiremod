# Generated by Django 5.2 on 2025-06-16 18:36

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CandidateProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume_file', models.FileField(upload_to='Candidates-Resume', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('resume_data', models.JSONField(blank=True, null=True)),
                ('willing_to_relocate', models.BooleanField(default=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('parsing_status', models.CharField(choices=[('not_parsed', 'Not Parsed'), ('parsing', 'Parsing in Progress'), ('parsed', 'Parsed Successfully'), ('failed', 'Parsing Failed')], default='not_parsed', max_length=20)),
                ('employment_type_preferences', models.JSONField(default=list, help_text="Array of employment types like ['Full-time', 'Part-time', 'Contract']")),
                ('work_mode_preferences', models.JSONField(default=list, help_text="Array of work modes like ['Remote', 'On-site', 'Hybrid']")),
                ('has_workvisa', models.BooleanField(default=False)),
                ('disability_categories', models.JSONField(default=list, help_text='Array for Disability criterias"s ')),
                ('accommodation_needs', models.CharField(choices=[('YES', 'YES'), ('NO', 'NO'), ('PREFER_TO_DISCUSS_LATER', 'PREFER_TO_DISCUSS_LATER')], max_length=100)),
                ('disclosure_preference', models.CharField(choices=[('DURING_APPLICATION', 'DURING_APPLICATION'), ('DURING_INTERVIEW', 'DURING_INTERVIEW'), ('AFTER_JOB_OFFER', 'AFTER_JOB_OFFER'), ('AFTER_STARTING_WORK', 'AFTER_STARTING_WORK'), ('NOT_APPLICABLE', 'NOT_APPLICABLE')], max_length=100)),
                ('workplace_accommodations', models.JSONField(default=list, help_text='Accommodations for WorkPlace')),
                ('expected_salary_range', models.CharField(blank=True, max_length=20, null=True)),
                ('video_pitch_url', models.FileField(blank=True, null=True, upload_to='Candidates-VideoPitches', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'mov', 'wmv', 'avi', 'avchd', 'flv', 'f4v', 'swf', 'mkv'])])),
                ('is_available', models.BooleanField(default=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organization.organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['organization', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField()),
                ('section', models.TextField(blank=True, null=True)),
                ('selected_text', models.TextField(blank=True, null=True)),
                ('context', models.JSONField(blank=True, null=True)),
                ('note', models.CharField(max_length=100)),
                ('note_file', models.FileField(blank=True, null=True, upload_to='Notes-File', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'docx', 'jpeg', 'png', 'svg'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='candidates.candidateprofile')),
            ],
        ),
    ]
